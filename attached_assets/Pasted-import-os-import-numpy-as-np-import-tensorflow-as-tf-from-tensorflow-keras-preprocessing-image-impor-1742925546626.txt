import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import cv2

# Load and preprocess the dataset
data_dir = ""
categories = ['no', 'yes']  # 'no' for no tumor, 'yes' for tumor

# Initialize data and labels lists
data = []
labels = []

# Load images and resize to 128x128, append to lists
for category in categories:
    folder_path = os.path.join(data_dir, category)
    class_label = categories.index(category)
    for img_name in os.listdir(folder_path):
        try:
            img_path = os.path.join(folder_path, img_name)
            img = cv2.imread(img_path)
            img = cv2.resize(img, (128, 128))  # Resize all images to 128x128
            data.append(img)
            labels.append(class_label)
        except Exception as e:
            print(f"Error loading image: {img_name}, error: {e}")

# Convert to numpy arrays
data = np.array(data)
labels = np.array(labels)

# Normalize pixel values
data = data / 255.0

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

# Build the CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D(pool_size=(2, 2)),
    
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')  # Binary classification: Tumor or No Tumor
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Data augmentation to avoid overfitting
train_datagen = ImageDataGenerator(
    rotation_range=10,
    zoom_range=0.1,
    horizontal_flip=True,
    vertical_flip=False
)

# Train the model
history = model.fit(train_datagen.flow(X_train, y_train, batch_size=32), 
                    epochs=25, 
                    validation_data=(X_test, y_test))

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

# Save the model
model.save('brain_tumor_cnn_model.h5')

# Plot training and validation accuracy and loss
plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()

# Testing the model on a single image
def test_single_image(image_path, model):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (128, 128)) / 255.0
    img = np.reshape(img, (1, 128, 128, 3))
    prediction = model.predict(img)
    if prediction < 0.5:
        return 'No Tumor Detected'
    else:
        return 'Tumor Detected'

# Test example
test_image_path = "path_to_single_mri_image"
result = test_single_image(test_image_path, model)
print(result)